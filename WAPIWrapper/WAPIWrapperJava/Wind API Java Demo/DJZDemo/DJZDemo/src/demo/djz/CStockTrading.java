package demo.djz;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.cpp.CPPObject;

import demo.djz.IStockTrading.BalanceReceiver;
import demo.djz.IStockTrading.OrderReceiver;
import demo.djz.IStockTrading.PositionReceiver;
import demo.djz.IStockTrading.QuoteReceiver;
import demo.djz.IStockTrading.StockDetailReceiver;

/**
 * <i>native declaration : line 21</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Name("CStockTrading") 
@Library("DJZTrading") 
public class CStockTrading extends CPPObject {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>int start()</code><br>
	 * <i>native declaration : line 24</i>
	 */
	@Name("start") 
	public native int start();
	/**
	 * Original signature : <code>void init()</code><br>
	 * <i>native declaration : line 25</i>
	 */
	@Name("init") 
	public native void init();
	/**
	 * Original signature : <code>int loadHistory()</code><br>
	 * <i>native declaration : line 26</i>
	 */
	@Name("loadHistory") 
	public native int loadHistory(Pointer<Character> names);	
	/**
	 * Original signature : <code>int subscribe(LPCWSTR)</code><br>
	 * <i>native declaration : line 26</i>
	 */
	@Name("subscribe") 
	public native int subscribe(Pointer<Character> names);	
	
	/** C type : QuoteReceiver */
	@Field(0) 
	public Pointer<QuoteReceiver > receiver() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : QuoteReceiver */
	@Field(0) 
	public CStockTrading receiver(Pointer<QuoteReceiver > receiver) {
		this.io.setPointerField(this, 0, receiver);
		return this;
	}
	
	/** C type : PositionReceiver */
	@Field(1) 
	public Pointer<PositionReceiver > positionReceiver() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : QuoteReceiver */
	@Field(1) 
	public CStockTrading positionReceiver(Pointer<PositionReceiver > receiver) {
		this.io.setPointerField(this, 1, receiver);
		return this;
	}
	/** C type : PositionReceiver */
	@Field(2) 
	public Pointer<BalanceReceiver > balanceReceiver() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : QuoteReceiver */
	@Field(2) 
	public CStockTrading balanceReceiver(Pointer<BalanceReceiver > receiver) {
		this.io.setPointerField(this, 2, receiver);
		return this;
	}
	/** C type : PositionReceiver */
	@Field(3) 
	public Pointer<OrderReceiver > orderReceiver() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : QuoteReceiver */
	@Field(3) 
	public CStockTrading orderReceiver(Pointer<OrderReceiver > receiver) {
		this.io.setPointerField(this, 3, receiver);
		return this;
	}
	/** C type : StockDeitailReceiver */
	@Field(4) 
	public Pointer<StockDetailReceiver > detailReceiver() {
		return this.io.getPointerField(this, 4);
	}	
	/** C type : StockDeitailReceiver */
	@Field(4) 
	public CStockTrading detailReceiver(Pointer<StockDetailReceiver> receiver) {
		this.io.setPointerField(this, 4, receiver);
		return this;
	}
	
	@Name("stop") 
	public native int stop();
	
	@Name("loadPositions")
	public native void loadPositions();
	
	@Name("loadBalances")
	public native void loadBalances();
	
	@Name("placeOrder")
	public native int placeOrder(Pointer<CStructOrder> order);
	
	@Name("cancleOrder")
	public native int cancleOrder(Pointer<Character> orderId);
	
	@Name("login")
	public native int login(Pointer<Pointer<Character>> names);	
	
	@Name("queryOrder")
	public native void queryOrder();	
	
	@Name("queryOrder")
	public native void queryOrder(Pointer<Character> orderId);	

	@Name("west")
	public native void west(Pointer<Pointer<Character>> params);	
	
	public CStockTrading() {
		super();
	}
	public CStockTrading(Pointer pointer) {
		super(pointer);
	}
	
	
}
